import streamlit as st
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

# Configura√ß√£o inicial
st.set_page_config(page_title="Curr√≠culo - Gustavo Assum√ß√£o", layout="wide")

# Barra lateral para navega√ß√£o
st.sidebar.title("Navega√ß√£o")
pagina = st.sidebar.radio("Ir para:", ["Home", "Forma√ß√£o e Experi√™ncia", "Skills", "An√°lise de Dados"])

# Home
if pagina == "Home":
    st.title("Gustavo Bezerra Assum√ß√£o")
    st.image("perfil na floresta.png", width=150)
    st.write("S√£o Paulo, SP, Brasil")
    st.write("üìß Email: gustavobassumcaog@gmail.com")
    st.write("üîó [LinkedIn](https://www.linkedin.com/in/gustavo-bezerra-assum%C3%A7%C3%A3o-829202289/)")
    st.header("Sobre Mim")
    st.write("""
    EU sou estudante de Engenharia de Software na FIAP desde 2023. Nascido em Palmas - TO, atualmente resido em S√£o Paulo - SP.

Caracter√≠sticas Pessoais:
 
 * Sou trabalhador, autodidata e de mente aberta, sempre buscando novas oportunidades de 
 aprendizado.

 * Criativo e ambicioso, sou apaixonado por tecnologia e inova√ß√£o, o que me impulsiona a explorar 
 solu√ß√µes modernas e eficientes.

Interesses e Desenvolvimento Pessoal:

 * Tenho um forte interesse em estudar comportamento humano para melhorar minhas habilidades 
 interpessoais e me tornar a melhor vers√£o de mim mesmo.

 * Busco constantemente o crescimento pessoal e profissional, visando entender melhor os outros e 
 contribuir positivamente em qualquer ambiente.


Compet√™ncias T√©cnicas:

 * Experi√™ncia pr√°tica em desenvolvimento full stack, com habilidades em:
    * HTML e CSS
    * JavaScript
    * React
    * PHP com Laravel
    * Bancos de dados como MySQL e SQL Server
    * Java
    * Git e GitHub

 * Comprometido com o aprendizado cont√≠nuo, possuo certifica√ß√µes em:
    * SQL
    *Java
    * Python
    * BlockChain 
    * Git e GitHub

Objetivos Profissionais:

 * Estou em busca de oportunidades, onde possa aplicar minhas habilidades para integrar tecnologia e 
 estrat√©gia de neg√≥cios.

 * Desejo contribuir para projetos inovadores que gerem valor real, utilizando minha capacidade de 
 colabora√ß√£o e sinergia em equipe para alcan√ßar resultados excepcionais.

Acredito que minha combina√ß√£o de habilidades t√©cnicas, paix√£o por inova√ß√£o e capacidade de trabalhar bem em equipe me torna uma adi√ß√£o valiosa para qualquer organiza√ß√£o. Estou sempre pronto para enfrentar desafios e criar solu√ß√µes impactantes.
    """)

# Forma√ß√£o e Experi√™ncia
elif pagina == "Forma√ß√£o e Experi√™ncia":
    st.title("Forma√ß√£o Acad√™mica")
    st.write("üéì FIAP - Bacharelado em Engenharia de Software (2023‚Äì2027)")

    st.title("Experi√™ncia Profissional")
    st.subheader("TC Sistemas - Desenvolvedor Full Stack (Remoto) | Jul 2024 ‚Äì Out 2024")
    st.write("""
        Desenvolvi o front-end e o back-end.
        * Usando php (laravel 11). 
        * Fiz as funcionalidades e efeitos com o javascript e com o bootstrap.
        * Montando o layout em HTML, com estiliza√ß√£o do CSS puro (tudo dentro do laravel 11). 
    """)

    st.subheader("Projeto Acad√™mico: Sijia")
    st.write("""
    - Plataforma voltada para a experi√™ncia de pacientes pedi√°tricos
    """)

# Skills
elif pagina == "Skills":
    st.title("Habilidades T√©cnicas")
    st.write("""
    - üñ•Ô∏è **Front-End:** HTML, CSS, JavaScript, React
    - ‚öôÔ∏è **Back-End:** PHP, Node.js, Python, Java, .NET
    - üóÑÔ∏è **Banco de Dados:** SQL, MySQL
    - üîß **Ferramentas:** Git, GitHub
    - üé® **Frameworks:** Laravel, Bootstrap, Tailwind
    """)

    st.title("Idiomas")
    st.write("""
    - üáßüá∑ Portugu√™s ‚Äì Nativo
    - üá∫üá∏ Ingl√™s ‚Äì Intermedi√°rio
    - üá®üá≥ Mandarim ‚Äì Iniciante
    """)

elif pagina == "An√°lise de Dados":
    st.title("An√°lise de Dados - Dados de A√ß√µes")
    
    st.header("1. Apresenta√ß√£o dos Dados e Tipos de Vari√°veis")
    st.write("""
    Este conjunto de dados cont√©m informa√ß√µes hist√≥ricas de uma a√ß√£o, com as seguintes colunas:
    - **Date:** Data da negocia√ß√£o.
    - **Open, High, Low, Close:** Pre√ßos de abertura, m√°xima, m√≠nima e fechamento, que s√£o vari√°veis quantitativas cont√≠nuas.
    - **Volume:** Quantidade de a√ß√µes negociadas (vari√°vel quantitativa discreta).
    - **Dividends:** Dividendos pagos (normalmente nulos ou discretos).
    - **Stock Splits:** Eventos de desdobramento de a√ß√µes (contagem de eventos discretos).
    """)
    
    import os
    import pandas as pd
    import numpy as np
    import streamlit as st
    
    # Carregar os dados
    df = pd.read_excel("historico_btg_pactual.xlsx", parse_dates=["Date"])
    st.success("Conjunto de dados 'historico_btg_pactual.xlsx' carregado com sucesso.")
    
    st.dataframe(df.head())
    st.write("""
    **Interpreta√ß√£o dos Tipos de Dados:**
    - Os pre√ßos (Open, High, Low, Close) s√£o dados quantitativos cont√≠nuos.
    - O Volume √© um dado quantitativo discreto.
    """)
    
    st.subheader("Perguntas Relevantes para a An√°lise")
    st.write("""
    - **Qual √© a distribui√ß√£o dos pre√ßos de fechamento?**  
      Analisar se os pre√ßos de fechamento seguem uma distribui√ß√£o normal.
      
    - **Como se comportam os retornos di√°rios?**  
      Calcular os retornos di√°rios (varia√ß√£o percentual entre Open e Close) e avaliar sua distribui√ß√£o.
      
    - **Existe correla√ß√£o entre o volume negociado e os retornos di√°rios?**  
      Investigar a rela√ß√£o entre a quantidade negociada e a varia√ß√£o percentual.
      
    - **Qual a frequ√™ncia de dias em que o pre√ßo fechou acima da abertura?**  
      Criar uma vari√°vel bin√°ria e analisar a contagem semanal desses eventos.
    """)
    
    # Filtrar dados do √∫ltimo ano para as an√°lises
    max_date = df["Date"].max()
    df_last_year = df[df["Date"] >= (max_date - pd.DateOffset(years=1))].copy()
    df_last_year["Return"] = (df_last_year["Close"] - df_last_year["Open"]) / df_last_year["Open"]
    
    st.header("2. Medidas Centrais, Dispers√£o e Correla√ß√£o (√öltimo Ano)")
    
    st.write("**Estat√≠sticas Descritivas do Conjunto de Dados:**")
    desc = df_last_year.describe()
    st.write(desc)
    st.write("""
    **An√°lise:**  
    As estat√≠sticas descritivas fornecem uma vis√£o geral sobre a tend√™ncia central, dispers√£o e poss√≠veis outliers dos dados.  
    Por exemplo:
    - A m√©dia e a mediana dos pre√ßos indicam o valor central dos dados.
    - O desvio padr√£o demonstra a volatilidade dos pre√ßos.
    """)
       
    st.write("**Matriz de Correla√ß√£o:**")
    corr = df_last_year.corr()
    st.write(corr)
    st.write("""
    **An√°lise da Matriz de Correla√ß√£o:**  
    A matriz de correla√ß√£o permite identificar rela√ß√µes lineares entre as vari√°veis.  
    Por exemplo, uma forte correla√ß√£o entre 'Open' e 'Close' sugere consist√™ncia no comportamento di√°rio da a√ß√£o.
    """)
    
    st.header("3. Aplica√ß√£o de Distribui√ß√µes Probabil√≠sticas (√öltimo Ano)")
    st.write("""
    Utilizando os dados do √∫ltimo ano, aplicamos tr√™s abordagens:
    - **Normal:** Para modelar os **Retornos Di√°rios**.
    - **Poisson:** Para modelar a contagem semanal de dias em que o pre√ßo fechou acima da abertura.
    - **Binomial:** Para analisar a propor√ß√£o de dias de ganho vs. perda e a probabilidade de sequ√™ncias de ganhos ou perdas.
    """)
    
    ### Distribui√ß√£o Normal para os Retornos Di√°rios
    st.subheader("Distribui√ß√£o Normal - Retornos Di√°rios (√öltimo Ano)")
    from scipy.stats import norm
    import matplotlib.pyplot as plt
    fig, ax = plt.subplots()
    n, bins, patches = ax.hist(df_last_year["Return"], bins=20, density=True, alpha=0.6, color='green')
    mu, std = norm.fit(df_last_year["Return"])
    xmin, xmax = ax.get_xlim()
    x = np.linspace(xmin, xmax, 100)
    p = norm.pdf(x, mu, std)
    ax.plot(x, p, 'k', linewidth=2)
    ax.set_title(f"Distribui√ß√£o Normal dos Retornos Di√°rios (√öltimo Ano)\n(m√©dia = {mu:.4f}, dp = {std:.4f})")
    st.pyplot(fig)
    
    st.write("""
    **Interpreta√ß√£o:**  
    A curva normal ajustada aos retornos di√°rios revela que a maioria dos valores se concentra em torno da m√©dia, refletindo a volatilidade do ativo.
    """)
    
    ### Distribui√ß√£o de Poisson para a contagem de dias de alta
    st.subheader("Distribui√ß√£o de Poisson - Contagem de Dias de Alta (√öltimo Ano)")
    st.write("""
    Consideramos cada dia em que o pre√ßo de fechamento supera o de abertura como um evento de "alta".  
    Agregamos esses eventos por semana para obter a contagem semanal, modelada por uma distribui√ß√£o de Poisson.
    """)
    df_last_year["Up_Day"] = (df_last_year["Close"] > df_last_year["Open"]).astype(int)
    df_last_year["Week"] = pd.to_datetime(df_last_year["Date"]).dt.isocalendar().week
    weekly_up_year = df_last_year.groupby("Week")["Up_Day"].sum().reset_index()
        
    st.write("""
    **Interpreta√ß√£o:**  
    A modelagem com a distribui√ß√£o de Poisson evidencia a frequ√™ncia semanal dos dias de alta e permite avaliar se essa frequ√™ncia segue o comportamento esperado para eventos discretos.
    """)
    
    ### Distribui√ß√£o Binomial - An√°lise dos Dias de Ganho vs. Perda
    st.subheader("Distribui√ß√£o Binomial - An√°lise dos Dias de Ganho vs. Perda")
    st.write("""
    Em mercados financeiros, cada dia de negocia√ß√£o pode ser considerado um experimento de Bernoulli, onde:
    - **Sucesso:** Dia com retorno positivo (ganho).
    - **Falha:** Dia com retorno negativo (perda).
    
    **An√°lises Propostas:**
    - **Propor√ß√£o de Dias de Ganho vs. Perda:**  
      Investigar se a propor√ß√£o de dias com ganho difere significativamente de 50%.
    - **Sequ√™ncia de Ganhos ou Perdas:**  
      Calcular a probabilidade de ocorrer uma sequ√™ncia de 5 dias consecutivos de ganhos (ou de perdas).
    - **Varia√ß√£o em Per√≠odos de Alta Volatilidade:**  
      Comparar a propor√ß√£o de ganhos em dias de alta e baixa volatilidade.
    """)
    
    # C√°lculo da propor√ß√£o de dias de ganho e perda
    df_last_year["Gain"] = (df_last_year["Return"] > 0).astype(int)
    total_days = df_last_year.shape[0]
    gain_days = df_last_year["Gain"].sum()
    loss_days = total_days - gain_days
    p_gain = gain_days / total_days
    
    st.write(f"Total de dias analisados: **{total_days}**")
    st.write(f"Dias com ganho: **{gain_days}** ({p_gain:.2%})")
    st.write(f"Dias com perda: **{loss_days}** ({(1-p_gain):.2%})")
    st.write("**Pergunta:** A propor√ß√£o de dias com ganho difere significativamente de 50%?")
    
    from scipy.stats import binomtest
    result = binomtest(gain_days, total_days, p=0.5, alternative='two-sided')
    p_valor = result.pvalue
    st.write(f"P-valor do teste binomial: **{p_valor:.4f}**")

    
    # Probabilidade de observar uma sequ√™ncia de 5 dias consecutivos
    seq_5_gain = p_gain ** 5
    seq_5_loss = (1 - p_gain) ** 5
    st.write(f"Probabilidade de 5 dias consecutivos de ganho: **{seq_5_gain:.4f}**")
    st.write(f"Probabilidade de 5 dias consecutivos de perda: **{seq_5_loss:.4f}**")
    
    # An√°lise de volatilidade
    st.write("**An√°lise da Propor√ß√£o de Ganhos em Per√≠odos de Alta Volatilidade:**")
    # Criar uma m√©trica de volatilidade relativa
    df_last_year["Volatility"] = (df_last_year["High"] - df_last_year["Low"]) / df_last_year["Open"]
    vol_threshold = df_last_year["Volatility"].median()
    df_last_year["Volatility_Level"] = np.where(df_last_year["Volatility"] >= vol_threshold, "Alta", "Baixa")
    
    gain_rate_high = df_last_year[df_last_year["Volatility_Level"]=="Alta"]["Gain"].mean()
    gain_rate_low = df_last_year[df_last_year["Volatility_Level"]=="Baixa"]["Gain"].mean()
    
    st.write(f"Per√≠odo de **Alta Volatilidade** (‚â• mediana): Propor√ß√£o de ganhos = **{gain_rate_high:.2%}**")
    st.write(f"Per√≠odo de **Baixa Volatilidade** (< mediana): Propor√ß√£o de ganhos = **{gain_rate_low:.2%}**")
    st.write("""
    **Interpreta√ß√£o da Distribui√ß√£o Binomial:**  
    - Se a propor√ß√£o de ganhos estiver muito distante de 50%, isso pode indicar uma tend√™ncia ou vi√©s no comportamento do ativo.  
    - As probabilidades de observar sequ√™ncias de 5 dias consecutivos, calculadas a partir da propor√ß√£o observada, ajudam a identificar padr√µes de momentum ou persist√™ncia.  
    - A compara√ß√£o entre per√≠odos de alta e baixa volatilidade revela se condi√ß√µes de mercado extremas alteram significativamente essa propor√ß√£o.
    """)



# Executar o app:
# No terminal, rode: streamlit run curriculo.py
# python -m streamlit run curriculo.py